name: update-friends-posts
on:
  push:
    branches: [ "rs_dev" ]
  schedule:
    - cron: "0 0,6,12,18,21 * * *"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  # 在这里查看需要添加的secert
  # 通用配置
  SIMPLE_MODE: false # 极简模式是否开启
  DATABASE: sqlite
  PROXY: ${{ secrets.PROXY }} # 可选，http代理
  # mysql、sqlite、mongodb配置三选一即可
  # mysql配置
  MYSQL_URI: ${{ secrets.MYSQL_URI }} # MySQL URI
  # sqlite配置，用于将db文件上传到github仓库
  GITHUB_NAME: ${{ secrets.GH_NAME }} # 你的github昵称
  GITHUB_EMAIL: ${{ secrets.GH_EMAIL }} # 你的github邮箱
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }} # github token
  # mongodb配置
  MONGODB_URI: ${{ secrets.MONGODB_URI }}  # mongodb URI 支持'mongodb://'和'mongodb+srv://'
  TZ: Asia/Shanghai

jobs:
  build: 
    name: build binary file
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        
      # 第一步：恢复依赖缓存（只基于 Cargo.lock）
      - name: Restore Dependencies Cache
        id: deps-cache-restore
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-deps-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-deps-
      
      # 第二步：恢复构建产物缓存（基于 Cargo.lock 和代码哈希）
      - name: Restore Build Cache
        id: build-cache-restore
        uses: actions/cache/restore@v3
        with:
          path: target
          # 这里同时基于代码哈希和 Cargo.lock
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}
          # 如果完全匹配的缓存不存在，尝试只基于 Cargo.lock 的缓存
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-build-
      
      - name: Check Cache Status
        run: |
          echo "Dependencies cache status: ${{ steps.deps-cache-restore.outputs.cache-hit == 'true' && '✅ Hit' || '❌ Miss' }}"
          echo "Build cache status: ${{ steps.build-cache-restore.outputs.cache-hit == 'true' && '✅ Hit' || '❌ Miss' }}"
          
          if [ -f "target/release/core" ]; then
            echo "Binary found in cache:"
            echo "Binary timestamp: $(stat -c %y target/release/core)"
            echo "Binary size: $(du -h target/release/core | cut -f1)"
          else
            echo "Binary not found in cache, will compile."
          fi
        
      - name: Build
        run: cargo build --release
        
      # 保存依赖缓存（只在依赖缓存未命中时）
      - name: Save Dependencies Cache
        if: steps.deps-cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-deps-${{ hashFiles('**/Cargo.lock') }}
      
      # 总是保存构建产物缓存，因为可能有代码更新
      - name: Save Build Cache
        uses: actions/cache/save@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}
        
      - name: Read Config Values
        id: read_config
        run: |
          echo "Reading configuration from fc_settings.yaml"
          DEPLOY_TYPE=$(grep "DEPLOY_TYPE:" fc_settings.yaml | awk '{print $2}')
          DATABASE=$(grep "DATABASE:" fc_settings.yaml | awk '{print $2}')
          echo "DEPLOY_TYPE=$DEPLOY_TYPE" >> $GITHUB_ENV
          echo "DATABASE=$DATABASE" >> $GITHUB_ENV
          echo "Configuration values: DEPLOY_TYPE=$DEPLOY_TYPE, DATABASE=$DATABASE"
      - name: Run Core
        run: cargo run --bin core --release